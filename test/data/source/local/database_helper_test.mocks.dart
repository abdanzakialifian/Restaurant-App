// Mocks generated by Mockito 5.3.2 from annotations
// in restaurant_app/test/data/source/local/database_helper_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant_app/data/model/resturant_favorite.dart' as _i5;
import 'package:restaurant_app/data/source/local/database_helper.dart' as _i3;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i3.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.Database);
  @override
  set db(_i2.Database? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);
  @override
  _i4.Future<_i2.Database> initializeDb() => (super.noSuchMethod(
        Invocation.method(
          #initializeDb,
          [],
        ),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.method(
            #initializeDb,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Database>);
  @override
  _i4.Future<dynamic> insertRestaurant(
          _i5.RestaurantFavorite? restaurantFavorite) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertRestaurant,
          [restaurantFavorite],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<List<_i5.RestaurantFavorite>> getAllRestaurant() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllRestaurant,
          [],
        ),
        returnValue: _i4.Future<List<_i5.RestaurantFavorite>>.value(
            <_i5.RestaurantFavorite>[]),
      ) as _i4.Future<List<_i5.RestaurantFavorite>>);
  @override
  _i4.Future<dynamic> deleteRestaurant(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteRestaurant,
          [id],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<Map<dynamic, dynamic>> isFavorited(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #isFavorited,
          [id],
        ),
        returnValue:
            _i4.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
      ) as _i4.Future<Map<dynamic, dynamic>>);
}
